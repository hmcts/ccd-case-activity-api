#!groovy
import uk.gov.hmcts.contino.GithubAPI
properties(
        [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/ccd-case-activity-api'],
         pipelineTriggers([[$class: 'GitHubPushTrigger']])]
)

@Library("Infrastructure")

def type = "nodejs"
def product = "ccd"
def component = "case-activity-api"
def branchesToSync = ['demo', 'ithc', 'perftest']

// Variables to switch pipeline logic and wiring per type of build
def definitionStoreDevelopPr = "PR-575"  // This doesn't change frequently, but when it does, only change this value.
def dataStoreDevelopPr       = "PR-1260" // This doesn't change frequently, but when it does, only change this value.
def activityApiDevelopPr     = "PR-211"  // This doesn't change frequently, but when it does, only change this value.
def prsToUseAat              = "PR-288"  // Set this value to a PR number, or add it as a comma-separated value, if it's to follow CI/CD.

def secrets = [
    'ccd-${env}': [
        secret('ccd-caseworker-autotest-email', 'CCD_CASEWORKER_AUTOTEST_EMAIL'),
        secret('ccd-caseworker-autotest-password', 'CCD_CASEWORKER_AUTOTEST_PASSWORD'),
        secret('ccd-api-gateway-oauth2-client-secret', 'OAUTH2_CLIENT_SECRET'),

        secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
        secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
        secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),

        // Required for FTA tests
        secret('ccd-befta-caseworker-2-solicitor-1-pwd', 'CCD_BEFTA_CASEWORKER_2_SOLICITOR_1_PWD'),
        secret('ccd-befta-caseworker-2-solicitor-2-pwd', 'CCD_BEFTA_CASEWORKER_2_SOLICITOR_2_PWD'),
        secret('ccd-befta-caseworker-2-solicitor-3-pwd', 'CCD_BEFTA_CASEWORKER_2_SOLICITOR_3_PWD'),
        secret('ccd-befta-caseworker-1-pwd', 'CCD_BEFTA_CASEWORKER_1_PWD'),
        secret('ccd-befta-caseworker-2-pwd', 'CCD_BEFTA_CASEWORKER_2_PWD'),
        secret('ccd-befta-caseworker-3-pwd', 'CCD_BEFTA_CASEWORKER_3_PWD'),
        secret('ccd-befta-citizen-2-pwd', 'CCD_BEFTA_CITIZEN_2_PWD'),
        secret('ccd-befta-citizen-3-pwd', 'CCD_BEFTA_CITIZEN_3_PWD'),
        secret('ccd-befta-solicitor-3-pwd', 'CCD_BEFTA_SOLICITOR_3_PWD'),
        secret('ccd-befta-master-caseworker-pwd', 'CCD_BEFTA_MASTER_CASEWORKER_PWD')
    ],
    's2s-${env}': [
        secret('microservicekey-ccd-gw', 'BEFTA_S2S_CLIENT_SECRET')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

// Assume a feature build branched off 'develop', with dependencies develop-to-develop.
env.CCD_DATA_STORE_API_BASE_URL = "https://ccd-data-store-api-${dataStoreDevelopPr}.preview.platform.hmcts.net".toLowerCase()

// Other env variables needed for BEFTA.
env.CCD_API_GATEWAY_OAUTH2_CLIENT_ID = "ccd_gateway"
env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
env.BEFTA_S2S_CLIENT_ID = "ccd_gw"
env.OAUTH2_CLIENT_ID = "ccd_gateway"
env.OAUTH2_REDIRECT_URI = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
env.BEFTA_RESPONSE_HEADER_CHECK_POLICY = "JUST_WARN" // Temporary workaround for platform changes: turn BEFTA header checks to warning mode
env.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

withPipeline(type, product, component) {
    onMaster {
        enableSlackNotifications('#ccd-master-builds')
    }
    if (env.BRANCH_NAME.equalsIgnoreCase(activityApiDevelopPr)) {
        enableSlackNotifications('#ccd-develop-builds')
    }
    onDemo {
        enableSlackNotifications('#ccd-demo-builds')
    }
    onPR {
        enableSlackNotifications('#ccd-pr-builds')
    }

    syncBranchesWithMaster(branchesToSync)

    // Check if the build should be wired to an environment higher than 'preview'.
    if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'demo' || env.BRANCH_NAME == 'perftest' || env.BRANCH_NAME == 'ithc' || prsToUseAat.toLowerCase().contains(env.BRANCH_NAME.toLowerCase())) {
       environmentOfDependencies = env.BRANCH_NAME
       // use aat environment for dependencies of master and CI/CD builds.
       if (env.BRANCH_NAME.startsWith("PR") || env.BRANCH_NAME == 'master') {
          environmentOfDependencies = "aat"
       }
       env.CCD_DATA_STORE_API_BASE_URL = "http://ccd-data-store-api-${environmentOfDependencies}.service.core-compute-${environmentOfDependencies}.internal"
    } else {
        env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-api-${definitionStoreDevelopPr}.preview.platform.hmcts.net".toLowerCase()
    }

    echo "FTA will use Data Store: ${env.CCD_DATA_STORE_API_BASE_URL}"

    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)

    enableAksStagingDeployment()
    disableLegacyDeployment()
    enableHighLevelDataSetup()

    afterAlways('checkOut')  {
        sh "yarn cache clean"
    }

    afterAlways('build') {
        sh "yarn --check-cache"
    }

    afterAlways('smokeTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Smoke Tests/**/*'
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : 'BEFTA Report for Smoke Tests',
            reportFiles          : "overview-features.html",
            reportName           : "Smoke Test Report"
        ]
    }

    afterAlways('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : 'aat/BEFTA Report for Functional Tests',
            reportFiles          : "overview-features.html",
            reportName           : "Functional Test Report"
        ]
    }

    afterAlways('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/BEFTA Report for Functional Tests/**/*'
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : 'aat/BEFTA Report for Functional Tests',
            reportFiles          : "overview-features.html",
            reportName           : "Functional Test Report"
        ]
    }

    afterAlways('pact-provider-verification') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/tests/**/*'
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/tests/runProviderPactVerification",
            reportFiles          : "index.html",
            reportName           : "Contract Tests Report"
        ]
    }

}
